!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.blobCompare=t():e.blobCompare=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return n}));class n{static toBinaryString(e,t){return new Promise((r,n)=>{const i=new FileReader,a=t?Math.min(t,e.size):e.size,s=e.slice(0,a);i.onload=()=>r(i.result),i.onerror=n,i.readAsBinaryString(s)})}static toArrayBuffer(e,t){return new Promise((r,n)=>{const i=new FileReader,a=t?Math.min(t,e.size):e.size,s=e.slice(0,a);i.onload=()=>r(i.result),i.onerror=n,i.readAsArrayBuffer(s)})}static sizeEqual(e,t){return e.size===t.size}static typeEqual(e,t){return e.type===t.type}static async magicNumbersEqual(e,t){const r=[24,16,14,12,8,6,4];let[n,i]=await Promise.all([this.toBinaryString(e,24),this.toBinaryString(t,24)]);for(let e of r)if(n.substring(0,e)===i.substring(0,e))return!0;return!1}static async bytesEqualWithBinaryString(e,t,r){const[n,i]=await Promise.all([this.toBinaryString(e,r),this.toBinaryString(t,r)]);return n===i}static async bytesEqualWithArrayBuffer(e,t,r){const[n,i]=await Promise.all([this.toArrayBuffer(e,r),this.toArrayBuffer(t,r)]),a=new DataView(n),s=new DataView(i);for(var o=n.byteLength;o--;)if(a.getUint8(o)!==s.getUint8(o))return!1;return!0}static async isEqual(e,t,{methods:r=["size","type","byte"],byte:n="buffer",partial:i=!1,sizes:a=null}={}){const s=new Set;for(let o of r){let r;switch(o){case"byte":case"bytes":case"content":a=a instanceof Array?a:[e.size];for(let o of a){if((r="buffer"===n?await this.bytesEqualWithArrayBuffer(e,t,o):await this.bytesEqualWithBinaryString(e,t,o))===i)return r;s.add(r)}break;case"magic":case"headers":case"numbers":case"mime":if((r=await this.magicNumbersEqual(e,t))===i)return r;s.add(r);break;case"size":case"sizes":if((r=this.sizeEqual(e,t))===i)return r;s.add(r);break;case"type":case"types":if((r=this.typeEqual(e,t))===i)return r;s.add(r);break;default:throw new Error("Unknown comparison method")}}return!s.has(!1)}}}]).default}));