[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "import {blobToBinaryString, blobToArrayBuffer, compareBuffers} from './lib';\r\nimport WebworkerPromise from 'webworker-promise';\r\nimport Worker from './main.worker';\r\n\r\n/**\r\n * Detect if workers are enabled in current browser\r\n * @type {Boolean}\r\n */\r\nexport let workersEnabled = Boolean(window.Worker);\r\n\r\n/**\r\n * Utility class to nest all methods\r\n *\r\n * ## Conversion tools ###\r\n All conversions are run asynchronously.\r\n\r\n Method  |  Description\r\n --|--\r\n `blobCompare::toArrayBuffer` |  Converts a blob to an ArrayBuffer. it can be optionnally chunked and assigned to a web worker. Conversion is run asynchronously.\r\n `blobCompare::toBinaryString`  |  Converts a blob to a BinaryString. it can be optionnally chunked and assigned to a web worker. Conversion is run asynchronously.\r\n\r\n ## Comparison tools ###\r\n Method  |  Description | Sync/Async\r\n --|--|:--:\r\n `blobCompare::sizeEqual` | Compares size of two blobs | sync\r\n `blobCompare::typeEqual`  | Compares types of two blobs. Types are not really reliable as they can be tricked when creating a blob |  sync\r\n `blobCompare::magicNumbersEqual`  | Compares magic numbers of two blobs. A quick comparison is done, therefore weird data types may not be compared with 100% accuracy. In that case, simply clone repo and override this function to fit your needs | async\r\n `blobCompare::bytesEqualWithArrayBuffer` | Converts blobs or chunk blobs to ArrayBuffers and performs a byte to byte comparison | async\r\n `blobCompare::bytesEqualWithBinaryString`  | Converts blobs or chunk blobs to BinaryString and performs a byte to byte comparison | async\r\n `blobCompare::isEqual`  | The swiss army knife to bundle multiple comparison methods above in one single call | async\r\n */\r\nexport default class blobCompare {\r\n\r\n  /**\r\n   * Convert a blob to a binary string through a web worker thread\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}    blob      Blob\r\n   * @param   {Number}  chunk     Size in bytes to slice blob\r\n   * @return  {Promise<String>}   Raw binary data as a string\r\n   */\r\n  static async toBinaryStringWithWorker(blob, chunk) {\r\n    const worker = new WebworkerPromise(new Worker());\r\n    const response = await worker.exec('binary', {blob, chunk});\r\n\r\n    worker.terminate();\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Convert a blob to a binary string through main thread\r\n   *\r\n   * The blob can optionnaly be sliced with the chunk arguments\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  blob Blob to convert and optionnally sample\r\n   * @param   {Number}  chunk Size in bytes to slice blob\r\n   * @return  {Promise<String>}       Binary data as a string\r\n   */\r\n  static toBinaryStringWithoutWorker(blob, chunk) {\r\n    return blobToBinaryString(blob, chunk);\r\n  }\r\n\r\n  /**\r\n   * Convert a blob to a binary string\r\n   *\r\n   * The blob can optionnaly be sliced with the chunk arguments\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  blob Blob to convert and optionnally sample\r\n   * @param   {Number}  chunk Size in bytes to slice blob\r\n   * @param   {Boolean} [worker=true] Wether to use webworkers if available\r\n   * @return  {Promise<String>}       Binary data as a string\r\n   */\r\n  static toBinaryString(blob, chunk, worker = true) {\r\n    return (worker && workersEnabled) ? this.toBinaryStringWithWorker(blob, chunk) : this.toBinaryStringWithoutWorker(blob, chunk);\r\n  }\r\n\r\n  /**\r\n   * Convert a blob to an ArrayBuffer through a web worker\r\n   *\r\n   * The blob can optionnally be sliced with the `chunk`argument\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  blob Blob\r\n   * @param   {Number}  chunk Size in bytes to slice blob\r\n   * @return  {Promise<ArrayBuffer>}       Binary data as a buffer\r\n   */\r\n  static async toArrayBufferWithWorker(blob, chunk) {\r\n    const worker = new WebworkerPromise(new Worker());\r\n    const response = await worker.exec('buffer', {blob, chunk});\r\n\r\n    worker.terminate();\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Convert a blob to an ArrayBuffer through main thread\r\n   *\r\n   * The blob can optionnally be sliced with the `chunk`argument\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  blob Blob\r\n   * @param   {Number}  chunk Size in bytes to slice blob\r\n   * @return  {Promise<ArrayBuffer>}       Binary data as a buffer\r\n   */\r\n  static toArrayBufferWithoutWorker(blob, chunk) {\r\n    return blobToArrayBuffer(blob, chunk);\r\n  }\r\n\r\n  /**\r\n   * Convert a blob to an ArrayBuffer\r\n   *\r\n   * The blob can optionnally be sliced with the `chunk`argument\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  blob Blob\r\n   * @param   {Number}  chunk Size in bytes to slice blob\r\n   * @param   {Boolean} [worker=true] Wether to use webworkers if available\r\n   * @return  {Promise<ArrayBuffer>}       Binary data as a buffer\r\n   */\r\n  static toArrayBuffer(blob, chunk, worker = true) {\r\n    return (worker && workersEnabled) ? this.toArrayBufferWithWorker(blob, chunk) : this.toArrayBufferWithoutWorker(blob, chunk);\r\n  }\r\n\r\n  /**\r\n   * Compares two buffers byte through web worker\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {ArrayBuffer}  buf1          First buffer\r\n   * @param   {ArrayBuffer}  buf2          Second buffer\r\n   * @return  {Promise<Boolean>}           `true` if buffers are equal\r\n   */\r\n  static async compareBuffersWithWorker(buf1, buf2) {\r\n    if (buf1 === buf2) return true;\r\n\r\n    const worker = new WebworkerPromise(new Worker());\r\n    const response = await worker.exec('compare', {buf1, buf2}, [buf1, buf2]);\r\n\r\n    worker.terminate();\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Compares two buffers byte to byte through main thread\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {ArrayBuffer}  buf1          First buffer\r\n   * @param   {ArrayBuffer}  buf2          Second buffer\r\n   * @return  {Boolean}           `true` if buffers are equal\r\n   */\r\n  static compareBuffersWithoutWorker(buf1, buf2) {\r\n    return compareBuffers(buf1, buf2);\r\n  }\r\n\r\n  /**\r\n   * Compares two buffers byte to byte\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {ArrayBuffer}  buf1          First buffer\r\n   * @param   {ArrayBuffer}  buf2          Second buffer\r\n   * @param   {Boolean} [worker=true]      Whether to use worker or not\r\n   * @return  {Promise<Boolean>|Boolean}   `true` if buffers are equal\r\n   */\r\n  static compareBuffers(buf1, buf2, worker = true) {\r\n    return (worker && workersEnabled) ? this.compareBuffersWithWorker(buf1, buf2) : this.compareBuffersWithoutWorker(buf1, buf2);\r\n  }\r\n\r\n  /**\r\n   * Compare size of two blobs\r\n   *\r\n   * Obviously, two different blobs in content can have the same size and this method is only useful\r\n   * to discriminate blobs\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  b1 First blob\r\n   * @param   {Blob}  b2 Second Blob\r\n   * @return  {Boolean}     `true` if sizes are equal\r\n   */\r\n  static sizeEqual(b1, b2) {\r\n    return b1.size === b2.size;\r\n  }\r\n\r\n  /**\r\n   * Compare type of two blobs\r\n   *\r\n   * Never rely solely on this method to discriminate blobs or, worse, consider them as equal\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}    b1  First blob\r\n   * @param   {Blob}    b2  Second blob\r\n   * @return  {Boolean}     `true` if types are equal\r\n   */\r\n  static typeEqual(b1, b2) {\r\n    return b1.type === b2.type;\r\n  }\r\n\r\n  /**\r\n   * Compares the magic numbers of two blobs\r\n   *\r\n   * This method simply compare byte to byte at the start of data where magic numbers are usually located in most cases. You can find a quite\r\n   * exhaustive list of file signatures on [wikipedia](https://en.wikipedia.org/wiki/List_of_file_signatures)\r\n   *\r\n   * It does not provide any informations about file type, but you can easily use a library like [`file-type`](https://www.npmjs.com/package/file-type) to parse\r\n   * more informations about data if needed.\r\n   *\r\n   * Be warned that this method can lead to false negative/positive for some file types given the currently naive algorithm.\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  b1 First blob\r\n   * @param   {Blob}  b2 Second blob\r\n   * @param   {Boolean} [worker=true] Wether to use webworkers if available\r\n   * @return  {Promise<Boolean>}   `true` if magic numbers string is matching between two blogs   *\r\n  */\r\n  static async magicNumbersEqual(b1, b2, worker = true) {\r\n    if (b1 === b2) return true;\r\n\r\n    const sizes = [24, 16, 14, 12, 8, 6, 4];\r\n\r\n    let [s1, s2] = await Promise.all([this.toBinaryString(b1, 24, worker), this.toBinaryString(b2, 24, worker)]);\r\n\r\n    for (let size of sizes) {\r\n      /* istanbul ignore else */\r\n      if (s1.substring(0, size) === s2.substring(0, size)) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Compares two blobs by using binary strings\r\n   *\r\n   * This is not the default method to byte compare two blobs as benchmarks shows it's a little bit slower than using array buffers in most cases.\r\n   *\r\n   * There's still at least two cases where using binary string is much faster :\r\n   * - Empty blobs\r\n   * - Blobs much prone to have difference at the start of the data\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  b1   First blob\r\n   * @param   {Blob}  b2   Second blob\r\n   * @param   {Number}  size Size in bytes to slice blobs\r\n   * @param   {Boolean} [worker=true] Wether to use webworkers if available\r\n   * @return  {Promise<Boolean>}      Evaluates to `true` if blobs (or sliced blobs) are equals byte to byte\r\n   */\r\n  static async bytesEqualWithBinaryString(b1, b2, size, worker = true) {\r\n    if (b1 === b2) return true;\r\n\r\n    const [s1, s2] = await Promise.all([this.toBinaryString(b1, size, worker), this.toBinaryString(b2, size, worker)]);\r\n\r\n    return s1 === s2;\r\n  }\r\n\r\n  /**\r\n   * Compares two blobs by using arraybuffers\r\n   *\r\n   * This is the default comparison method\r\n   *\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  b1   First blob\r\n   * @param   {Blob}  b2   Second blob\r\n   * @param   {Number}  size Size in bytes to slice blobs\r\n   * @param   {Boolean} [worker=true] Wether to use webworkers if available\r\n   * @return  {Promise<Boolean>}      Evaluates to `true` if blobs (or sliced blobs) are equals byte to byte\r\n   * @throws  Error When comparison method is not recognized\r\n   */\r\n  static async bytesEqualWithArrayBuffer(b1, b2, size, worker = true) {\r\n    if (b1 === b2) return true;\r\n\r\n    const [buf1, buf2] = await Promise.all([this.toArrayBuffer(b1, size, worker), this.toArrayBuffer(b2, size, worker)]);\r\n\r\n    return this.compareBuffers(buf1, buf2, worker);\r\n  }\r\n\r\n  /**\r\n   * Automatically compares two blobs by using the given methods\r\n   *\r\n   * Allowed methods are with aliases :\r\n   * - `byte`, `bytes`, `content` : Performs a byte comparison between the two blogs. The optional `sizes` option parameter can be used to provide sizes\r\n   * to perform comparison on sliced blobs. See {@link blobCompare.bytesEqualWithArrayBuffer} and {@link blobCompare.bytesEqualWithBinaryString} for more informations;\r\n   * - `magic`, `headers`, `numbers`, `mime` : Compare two blobs based on magic numbers. See {@link blobCompare.magicNumbersEqual} for more informations;\r\n   * - `size`, `sizes` : Compare two blobs based on their size in bytes. See {@link blobCompare.sizeEqual} for more informations;\r\n   * - `type`, `types` : Compare two blobs based on their type. See {@link blobCompare.typeEqual} for more informations.\r\n   *\r\n   *\r\n   * Using the `partial` option can be tricky as it's easy to have false positive.\r\n   *\r\n   * As default, `isEqual` performs first a check on `size` method to discrimate blobs, then `type`, then `magic` and fallback on `byte` comparison on full data.\r\n   * This default order ensures the most optimized resource cost, though performing a complete comparison. For huge blobs, one may think about doing chunks comparison.\r\n   *\r\n   * Workers can be disabled through options\r\n   *\r\n   * @version 1.1.0\r\n   * @since   1.0.0\r\n   * @param   {Blob}  b1                First blob\r\n   * @param   {Blob}  b2                Second blob\r\n   * @param   {Object}  [options]   Configuration to use when performing comparison\r\n   * @param   {Array}   [options.methods=['size', 'type', 'magic', 'byte']] Default methods used for comparison. Methods are applied in the same order\r\n   * @param   {String}  [options.byte='buffer']   If set to `buffer`, byte comparison will be based on arraybuffers. Otherwise, it will use binary strings\r\n   * @param   {Boolean} [options.partial=false]   When set to `true`, the first successful comparison method will prevent further evaluations and return true immediately\r\n   * @param   {Array}   [options.chunks=null]      Custom sizes to use when performing a byte comparison. It really have few usage as one must ensure a regular pattern in blobs data to avoid false positive\r\n   * @param   {Boolean} [options.worker=true]      Wether to use web workers if available\r\n   * @return  {Promise<Boolean>}                   If `true`, blobs are equals given the used methods\r\n   */\r\n  static async isEqual(b1, b2, {methods = ['size', 'type', 'magic', 'byte'], byte = 'buffer', partial = false, chunks = null, worker = true} = {}) {\r\n    let passed = null;\r\n\r\n    for (let method of methods) {\r\n      if (passed === false) break;\r\n      if (partial && passed === true) break;\r\n\r\n      switch (method) {\r\n        case 'byte':\r\n        case 'bytes':\r\n        case 'content':\r\n          chunks = chunks instanceof Array ? chunks : [b1.size];\r\n          passed = true;\r\n\r\n          for (let chunk of chunks) {\r\n            let chunkPassed = false;\r\n\r\n            chunkPassed = byte === 'buffer' ? await this.bytesEqualWithArrayBuffer(b1, b2, chunk, worker) : await this.bytesEqualWithBinaryString(b1, b2, chunk, worker);\r\n            if (!chunkPassed) passed = false;\r\n          }\r\n          break;\r\n\r\n        case 'magic':\r\n        case 'headers':\r\n        case 'numbers':\r\n        case 'mime':\r\n          passed = await this.magicNumbersEqual(b1, b2, worker);\r\n          break;\r\n\r\n        case 'size':\r\n        case 'sizes':\r\n          passed = this.sizeEqual(b1, b2);\r\n          break;\r\n\r\n        case 'type':\r\n        case 'types':\r\n          passed = this.typeEqual(b1, b2);\r\n          break;\r\n\r\n        default: throw new Error('Blob-compare : Unknown comparison method');\r\n      }\r\n    }\r\n\r\n    return passed;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/blob-compare/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "workersEnabled",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~workersEnabled",
    "access": "public",
    "export": true,
    "importPath": "blob-compare/src/index.js",
    "importStyle": "{workersEnabled}",
    "description": "Detect if workers are enabled in current browser",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "blobCompare",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~blobCompare",
    "access": "public",
    "export": true,
    "importPath": "blob-compare/src/index.js",
    "importStyle": "blobCompare",
    "description": "Utility class to nest all methods\n\n## Conversion tools ###\nAll conversions are run asynchronously.\n\nMethod  |  Description\n--|--\n`blobCompare::toArrayBuffer` |  Converts a blob to an ArrayBuffer. it can be optionnally chunked and assigned to a web worker. Conversion is run asynchronously.\n`blobCompare::toBinaryString`  |  Converts a blob to a BinaryString. it can be optionnally chunked and assigned to a web worker. Conversion is run asynchronously.\n\n## Comparison tools ###\nMethod  |  Description | Sync/Async\n--|--|:--:\n`blobCompare::sizeEqual` | Compares size of two blobs | sync\n`blobCompare::typeEqual`  | Compares types of two blobs. Types are not really reliable as they can be tricked when creating a blob |  sync\n`blobCompare::magicNumbersEqual`  | Compares magic numbers of two blobs. A quick comparison is done, therefore weird data types may not be compared with 100% accuracy. In that case, simply clone repo and override this function to fit your needs | async\n`blobCompare::bytesEqualWithArrayBuffer` | Converts blobs or chunk blobs to ArrayBuffers and performs a byte to byte comparison | async\n`blobCompare::bytesEqualWithBinaryString`  | Converts blobs or chunk blobs to BinaryString and performs a byte to byte comparison | async\n`blobCompare::isEqual`  | The swiss army knife to bundle multiple comparison methods above in one single call | async",
    "lineNumber": 32,
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "toBinaryStringWithWorker",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.toBinaryStringWithWorker",
    "access": "public",
    "description": "Convert a blob to a binary string through a web worker thread",
    "lineNumber": 42,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<String>"
      ],
      "spread": false,
      "description": "Raw binary data as a string"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "toBinaryStringWithoutWorker",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.toBinaryStringWithoutWorker",
    "access": "public",
    "description": "Convert a blob to a binary string through main thread\n\nThe blob can optionnaly be sliced with the chunk arguments",
    "lineNumber": 61,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob to convert and optionnally sample"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<String>"
      ],
      "spread": false,
      "description": "Binary data as a string"
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "toBinaryString",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.toBinaryString",
    "access": "public",
    "description": "Convert a blob to a binary string\n\nThe blob can optionnaly be sliced with the chunk arguments",
    "lineNumber": 77,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob to convert and optionnally sample"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "worker",
        "description": "Wether to use webworkers if available"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<String>"
      ],
      "spread": false,
      "description": "Binary data as a string"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "toArrayBufferWithWorker",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.toArrayBufferWithWorker",
    "access": "public",
    "description": "Convert a blob to an ArrayBuffer through a web worker\n\nThe blob can optionnally be sliced with the `chunk`argument",
    "lineNumber": 92,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ArrayBuffer>"
      ],
      "spread": false,
      "description": "Binary data as a buffer"
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "toArrayBufferWithoutWorker",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.toArrayBufferWithoutWorker",
    "access": "public",
    "description": "Convert a blob to an ArrayBuffer through main thread\n\nThe blob can optionnally be sliced with the `chunk`argument",
    "lineNumber": 111,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ArrayBuffer>"
      ],
      "spread": false,
      "description": "Binary data as a buffer"
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "toArrayBuffer",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.toArrayBuffer",
    "access": "public",
    "description": "Convert a blob to an ArrayBuffer\n\nThe blob can optionnally be sliced with the `chunk`argument",
    "lineNumber": 127,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "worker",
        "description": "Wether to use webworkers if available"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ArrayBuffer>"
      ],
      "spread": false,
      "description": "Binary data as a buffer"
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "compareBuffersWithWorker",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.compareBuffersWithWorker",
    "access": "public",
    "description": "Compares two buffers byte through web worker",
    "lineNumber": 140,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf1",
        "description": "First buffer"
      },
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf2",
        "description": "Second buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": "`true` if buffers are equal"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "compareBuffersWithoutWorker",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.compareBuffersWithoutWorker",
    "access": "public",
    "description": "Compares two buffers byte to byte through main thread",
    "lineNumber": 159,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf1",
        "description": "First buffer"
      },
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf2",
        "description": "Second buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if buffers are equal"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "compareBuffers",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.compareBuffers",
    "access": "public",
    "description": "Compares two buffers byte to byte",
    "lineNumber": 173,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf1",
        "description": "First buffer"
      },
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf2",
        "description": "Second buffer"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "worker",
        "description": "Whether to use worker or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>",
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if buffers are equal"
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "sizeEqual",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.sizeEqual",
    "access": "public",
    "description": "Compare size of two blobs\n\nObviously, two different blobs in content can have the same size and this method is only useful\nto discriminate blobs",
    "lineNumber": 189,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b1",
        "description": "First blob"
      },
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b2",
        "description": "Second Blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if sizes are equal"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "typeEqual",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~blobCompare.typeEqual",
    "access": "public",
    "description": "Compare type of two blobs\n\nNever rely solely on this method to discriminate blobs or, worse, consider them as equal",
    "lineNumber": 204,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b1",
        "description": "First blob"
      },
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b2",
        "description": "Second blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if types are equal"
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "magicNumbersEqual",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.magicNumbersEqual",
    "access": "public",
    "description": "Compares the magic numbers of two blobs\n\nThis method simply compare byte to byte at the start of data where magic numbers are usually located in most cases. You can find a quite\nexhaustive list of file signatures on [wikipedia](https://en.wikipedia.org/wiki/List_of_file_signatures)\n\nIt does not provide any informations about file type, but you can easily use a library like [`file-type`](https://www.npmjs.com/package/file-type) to parse\nmore informations about data if needed.\n\nBe warned that this method can lead to false negative/positive for some file types given the currently naive algorithm.",
    "lineNumber": 226,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b1",
        "description": "First blob"
      },
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b2",
        "description": "Second blob"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "worker",
        "description": "Wether to use webworkers if available"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": "`true` if magic numbers string is matching between two blogs   *"
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "bytesEqualWithBinaryString",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.bytesEqualWithBinaryString",
    "access": "public",
    "description": "Compares two blobs by using binary strings\n\nThis is not the default method to byte compare two blobs as benchmarks shows it's a little bit slower than using array buffers in most cases.\n\nThere's still at least two cases where using binary string is much faster :\n- Empty blobs\n- Blobs much prone to have difference at the start of the data",
    "lineNumber": 258,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b1",
        "description": "First blob"
      },
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b2",
        "description": "Second blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Size in bytes to slice blobs"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "worker",
        "description": "Wether to use webworkers if available"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": "Evaluates to `true` if blobs (or sliced blobs) are equals byte to byte"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "bytesEqualWithArrayBuffer",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.bytesEqualWithArrayBuffer",
    "access": "public",
    "description": "Compares two blobs by using arraybuffers\n\nThis is the default comparison method",
    "lineNumber": 280,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b1",
        "description": "First blob"
      },
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b2",
        "description": "Second blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Size in bytes to slice blobs"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "worker",
        "description": "Wether to use webworkers if available"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": "Evaluates to `true` if blobs (or sliced blobs) are equals byte to byte"
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error When comparison method is not recognized"
      }
    ]
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "isEqual",
    "memberof": "src/index.js~blobCompare",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/index.js~blobCompare.isEqual",
    "access": "public",
    "description": "Automatically compares two blobs by using the given methods\n\nAllowed methods are with aliases :\n- `byte`, `bytes`, `content` : Performs a byte comparison between the two blogs. The optional `sizes` option parameter can be used to provide sizes\nto perform comparison on sliced blobs. See {@link blobCompare.bytesEqualWithArrayBuffer} and {@link blobCompare.bytesEqualWithBinaryString} for more informations;\n- `magic`, `headers`, `numbers`, `mime` : Compare two blobs based on magic numbers. See {@link blobCompare.magicNumbersEqual} for more informations;\n- `size`, `sizes` : Compare two blobs based on their size in bytes. See {@link blobCompare.sizeEqual} for more informations;\n- `type`, `types` : Compare two blobs based on their type. See {@link blobCompare.typeEqual} for more informations.\n\n\nUsing the `partial` option can be tricky as it's easy to have false positive.\n\nAs default, `isEqual` performs first a check on `size` method to discrimate blobs, then `type`, then `magic` and fallback on `byte` comparison on full data.\nThis default order ensures the most optimized resource cost, though performing a complete comparison. For huge blobs, one may think about doing chunks comparison.\n\nWorkers can be disabled through options",
    "lineNumber": 318,
    "since": "  1.0.0",
    "version": "1.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b1",
        "description": "First blob"
      },
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "b2",
        "description": "Second blob"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Configuration to use when performing comparison"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['size', 'type', 'magic', 'byte']",
        "defaultRaw": "['size', 'type', 'magic', 'byte']",
        "name": "options.methods",
        "description": "Default methods used for comparison. Methods are applied in the same order"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'buffer'",
        "defaultRaw": "'buffer'",
        "name": "options.byte",
        "description": "If set to `buffer`, byte comparison will be based on arraybuffers. Otherwise, it will use binary strings"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.partial",
        "description": "When set to `true`, the first successful comparison method will prevent further evaluations and return true immediately"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.chunks",
        "description": "Custom sizes to use when performing a byte comparison. It really have few usage as one must ensure a regular pattern in blobs data to avoid false positive"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.worker",
        "description": "Wether to use web workers if available"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": "If `true`, blobs are equals given the used methods"
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/lib.js",
    "content": "/**\r\n * Convert a blob to a binary string\r\n *\r\n * The blob can optionnaly be sliced with the slice arguments\r\n *\r\n * @version 1.0.0\r\n * @since   1.0.0\r\n * @param   {Blob}  blob Blob to convert and optionnally sample\r\n * @param   {Number}  chunk Size in bytes to slice blob\r\n * @return  {Promise<String>}       Binary data as a string\r\n */\r\nexport function blobToBinaryString(blob, chunk) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    const s = chunk ? Math.min(chunk, blob.size) : blob.size;\r\n    const b = blob.slice(0, s);\r\n\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n    reader.readAsBinaryString(b);\r\n  });\r\n}\r\n\r\n/**\r\n * Convert a blob to an ArrayBuffer\r\n *\r\n * The blob can optionnally be sliced with the `size`argument\r\n *\r\n * @version 1.0.0\r\n * @since   1.0.0\r\n * @param   {Blob}  blob Blob\r\n * @param   {Number}  chunk Size in bytes to slice blob\r\n * @return  {Promise<ArrayBuffer>}       Binary data as a buffer\r\n */\r\nexport function blobToArrayBuffer(blob, chunk) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    const s = chunk ? Math.min(chunk, blob.size) : blob.size;\r\n    const b = blob.slice(0, s);\r\n\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n    reader.readAsArrayBuffer(b);\r\n  });\r\n}\r\n\r\n/**\r\n * Compares two buffers byte to byte\r\n *\r\n * @version 1.0.0\r\n * @since   1.0.0\r\n * @param   {ArrayBuffer}  buf1          First buffer\r\n * @param   {ArrayBuffer}  buf2          Second buffer\r\n * @return  {Boolean}           `true` if buffers are equal\r\n */\r\nexport function compareBuffers(buf1, buf2) {\r\n  if (buf1 === buf2) return true;\r\n  if (buf1.byteLength !== buf2.byteLength) return false;\r\n\r\n  const d1 = new DataView(buf1), d2 = new DataView(buf2);\r\n\r\n  var i = buf1.byteLength;\r\n  while (i--) {\r\n    /* istanbul ignore else */\r\n    if (d1.getUint8(i) !== d2.getUint8(i)) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/blob-compare/src/lib.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "blobToBinaryString",
    "memberof": "src/lib.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib.js~blobToBinaryString",
    "access": "public",
    "export": true,
    "importPath": "blob-compare/src/lib.js",
    "importStyle": "{blobToBinaryString}",
    "description": "Convert a blob to a binary string\n\nThe blob can optionnaly be sliced with the slice arguments",
    "lineNumber": 12,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob to convert and optionnally sample"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<String>"
      ],
      "spread": false,
      "description": "Binary data as a string"
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "blobToArrayBuffer",
    "memberof": "src/lib.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib.js~blobToArrayBuffer",
    "access": "public",
    "export": true,
    "importPath": "blob-compare/src/lib.js",
    "importStyle": "{blobToArrayBuffer}",
    "description": "Convert a blob to an ArrayBuffer\n\nThe blob can optionnally be sliced with the `size`argument",
    "lineNumber": 35,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "blob",
        "description": "Blob"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "Size in bytes to slice blob"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ArrayBuffer>"
      ],
      "spread": false,
      "description": "Binary data as a buffer"
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "compareBuffers",
    "memberof": "src/lib.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib.js~compareBuffers",
    "access": "public",
    "export": true,
    "importPath": "blob-compare/src/lib.js",
    "importStyle": "{compareBuffers}",
    "description": "Compares two buffers byte to byte",
    "lineNumber": 56,
    "since": "  1.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf1",
        "description": "First buffer"
      },
      {
        "nullable": null,
        "types": [
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf2",
        "description": "Second buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if buffers are equal"
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/main.worker.js",
    "content": "import {blobToBinaryString, blobToArrayBuffer, compareBuffers} from './lib';\r\nimport registerWebworker from 'webworker-promise/lib/register';\r\n\r\nregisterWebworker()\r\n  .operation('binary', async ({blob, chunk}) => {\r\n    return await blobToBinaryString(blob, chunk);\r\n  })\r\n  .operation('buffer', async ({blob, chunk}) => {\r\n    return await blobToArrayBuffer(blob, chunk);\r\n  })\r\n  .operation('compare', ({buf1, buf2}) => {\r\n    return compareBuffers(buf1, buf2);\r\n  });\r\n",
    "static": true,
    "longname": "F:/Projets/blob-compare/src/main.worker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "[![Build Status](https://travis-ci.org/liqueurdetoile/blob-compare.svg?branch=master)](https://travis-ci.org/liqueurdetoile/blob-compare)\r\n[![Coverage Status](https://coveralls.io/repos/github/liqueurdetoile/blob-compare/badge.svg?branch=master)](https://coveralls.io/github/liqueurdetoile/blob-compare?branch=master)\r\n[![Gzip size](http://img.badgesize.io/https://cdn.jsdelivr.net/npm/blob-compare@latest?compression=gzip&style=flat-square)](https://cdn.jsdelivr.net/npm/blob-compare@latest)\r\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\r\n[![Documentation](https://liqueurdetoile.github.io/blob-compare/badge.svg)](https://liqueurdetoile.github.io/blob-compare/)\r\n[![Greenkeeper badge](https://badges.greenkeeper.io/liqueurdetoile/blob-compare.svg)](https://greenkeeper.io/)\r\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\r\n\r\n<p align=\"center\"><a href=\"https://liqueurdetoile.com\" target=\"\\_blank\"><img src=\"https://hosting.liqueurdetoile.com/logo_lqdt.png\" alt=\"Liqueur de Toile\"></a></p>\r\n\r\n# Blob comparison utility\r\n`blob-compare` is a small library designed to provide some useful methods to compare two blobs in browser with various methods :\r\n\r\n- Comparison on size of two blobs\r\n- Comparison on types of two blobs\r\n- Comparison on data types based on [magic numbers](https://en.wikipedia.org/wiki/List_of_file_signatures) of two blobs\r\n- Comparison byte to byte on full data or sliced subsets\r\n- A configurable combination of any of above to evaluate blobs or parts of blobs equality\r\n\r\nTool rely on native browsers buffer implementations and will likely work on any modern browser. It have been tested and benchmarked on Chrome, Firefox and Edge.\r\n\r\nTo provide better performance, `blob-compare` automatically relies on web workers if available when performing operations on blobs.\r\n\r\n## Installation\r\nYou can install it from `npm` or `yarn` :\r\n```bash\r\nnpm install blob-compare\r\n\r\nyarn add blob-compare\r\n```\r\nThen, simply require/import it to use it :\r\n\r\n```javascript\r\nconst blobCompare = require('blob-compare').default;\r\n// or\r\nimport blobCompare from 'blob-compare';\r\n```\r\nFor browser direct usage, `blob-compare` can be required as a script from any CDN mirroring NPM or Github, for instance :\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/blob-compare@latest\"></script>\r\n\r\n<script src=\"https://unpkg.com/blob-compare@latest\"></script>\r\n\r\n<script src=\"https://cdn.jsdelivr.net/gh/liqueurdetoile/blob-compare@latest/dist/index.min.js\"></script>\r\n```\r\n\r\nA global `blobCompare` will be automatically set after script was downloaded.\r\n\r\n## Quick reference\r\nSee [documentation](https://liqueurdetoile.github.io/blob-compare/) for a full reference.\r\n\r\n### Conversion tools ###\r\nAll conversions are run asynchronously.\r\n\r\nMethod  |  Description\r\n--|--\r\n`blobCompare::toArrayBuffer` |  Converts a blob to an ArrayBuffer. it can be optionnally chunked and assigned to a web worker. Conversion is run asynchronously.\r\n`blobCompare::toBinaryString`  |  Converts a blob to a BinaryString. it can be optionnally chunked and assigned to a web worker. Conversion is run asynchronously.\r\n\r\n### Comparison tools ###\r\nMethod  |  Description | Sync/Async\r\n--|--|:--:\r\n`blobCompare::sizeEqual` | Compares size of two blobs | sync\r\n`blobCompare::typeEqual`  | Compares types of two blobs. Types are not really reliable as they can be tricked when creating a blob |  sync\r\n`blobCompare::magicNumbersEqual`  | Compares [magic numbers](https://en.wikipedia.org/wiki/List_of_file_signatures) of two blobs. A quick comparison is done, therefore weird data types may not be compared with 100% accuracy. In that case, simply clone repo and override this function to fit your needs | async\r\n`blobCompare::bytesEqualWithArrayBuffer` | Converts blobs or chunk blobs to ArrayBuffers and performs a byte to byte comparison | async\r\n`blobCompare::bytesEqualWithBinaryString`  | Converts blobs or chunk blobs to BinaryString and performs a byte to byte comparison | async\r\n`blobCompare::isEqual`  | The swiss army knife to bundle multiple comparison methods above in one single call | async\r\n\r\n## Usage examples\r\n```javascript\r\n// assuming img1 and img2 are two blobs vars\r\n\r\n/**\r\n * Fully compare two blobs with default methods configuration\r\n*/\r\nblobCompare.isEqual(img1, img2).then(res...)\r\n\r\n/**\r\n * Comparing only file types\r\n */\r\nblobCompare.isEqual(img1, img2, {methods: ['magic']}).then(res...)\r\n// or\r\nblobCompare.magicNumbersEqual(img1, img2).then(res => ...)\r\n\r\n/**\r\n *  Compare file types AND the last 100 bytes of blobs\r\n *  Never find a use case ^^\r\n*/\r\nblobCompare.isEqual(img1, img2, {\r\n  methods: ['bytes'],\r\n  sizes: [-100]\r\n}).then(res => ...)\r\n\r\n/**\r\n * Compare file types OR the last 100 bytes of blobs\r\n*/\r\nblobCompare.isEqual(img1, img2, {\r\n  methods: ['bytes'],\r\n  sizes: [-100],\r\n  partial: true\r\n}).then(res => ...)\r\n```\r\nTo speed up things, `isEqual` with its default configuration checks first if sizes are equal, then types, then magic numbers and finally performs a byte to byte comparison to ensure blobs equality.\r\n\r\nAll methods working on bytes comparison are asynchronous, use web workers by default if available and works very well with `async/await` syntax.\r\n\r\n## About performance\r\nTrying to compare blobs can be tricky though the only real pitfall is most likely to run out of memory on the VM. There's not much to do with it except working only on smaller data chunks and use device storage like IndexedDb to buffer the unprocessed chunks.\r\n\r\n### Web workers\r\nAnother caveat is likely to consume device CPU to perform operations on blobs. Web workers can be very helpful in this case. `blob-compare` is enabling web workers by default for two major reasons :\r\n1. A worker is constructed each time a blob needs to be converted to raw binary data or array buffer. On a multi-threaded system, it allows efficient concurrency\r\n2. Huge blobs operations won't freeze the main thread\r\n\r\nThe cons is that processing will be slower due to the copy operation. A workaround could be to use directly `ArrayBuffers` and the `blobCompare.compareBuffers` method that take advantage of the [transferable interface](https://developer.mozilla.org/en-US/docs/Web/API/Transferable) of an ArrayBuffer.\r\n\r\nDisabling web workers can also help prevent memory issues in some cases.\r\n\r\n### Benchmarking\r\n**Repo is quite heavy due to fixtures.** I've tried to implement some automated bechnmarks around karma and benchmark.js but I'm quickly hitting some troubles with larger blobs, event with small blobs on Edge.\r\n\r\nI'm not sure that I'm doing right with my benchmarks _Oo_\r\n\r\nIf I find some time, I may try on jsPerf.\r\n\r\nAnyway, after cloning and installing this repository, you can play with fixtures and benchmarks (they are removed from npm version).\r\n\r\nJust bash `npm run bench:all` to run them into Chrome, Firefox and Edge. You can also make ChromeHeadless accessible and use `npm run bench`\r\n\r\nLatest results for Chrome, Firefox and Edge are stored in `results.json`\r\n\r\n## Documentation\r\nMethods are fully documented and docs are available on [github pages](https://liqueurdetoile.github.io/blob-compare/).\r\n\r\n## Issues and PRs\r\nAny bugs and issues can be filed on the [github repository](https://github.com/liqueurdetoile/blob-compare/issues).\r\n\r\n**You are free and very welcome to fork the project and submit any PR to fix or improve `blob-compare`.**\r\n\r\n## Changelog ##\r\n  - **1.1.0** : Add magic numbers in default comparison methods as type value can be falsy. `blobCompare.isEqual` now returns immediately when a falsy value is encountered or at first successful comparison if partial option is set to `true`\r\n  - **1.0.1** : Fix package content\r\n",
    "longname": "F:\\Projets\\blob-compare\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"blob-compare\",\r\n  \"version\": \"0.0.0\",\r\n  \"description\": \"Small library to quickly compare two blobs based on blob attributes and fallback to binary string conversion\",\r\n  \"main\": \"dist/index.min.js\",\r\n  \"sideEffects\": false,\r\n  \"keywords\": [\r\n    \"blob\",\r\n    \"comparison\",\r\n    \"comparison-tool\",\r\n    \"blobs\",\r\n    \"magic numbers\"\r\n  ],\r\n  \"homepage\": \"https://github.com/liqueurdetoile/blob-compare#readme\",\r\n  \"repository\": \"https://github.com/liqueurdetoile/blob-compare\",\r\n  \"bugs\": \"https://github.com/liqueurdetoile/blob-compare/issues\",\r\n  \"author\": \"Liqueur de Toile <contact@liqueurdetoile.com>\",\r\n  \"license\": \"MIT\",\r\n  \"scripts\": {\r\n    \"build\": \"webpack --config .config/webpack/build.js -p\",\r\n    \"test\": \"cross-env BABEL_ENV=test karma start --single-run --browsers ChromeHeadless && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\",\r\n    \"test:dry\": \"cross-env BABEL_ENV=test karma start --single-run --browsers ChromeHeadless\",\r\n    \"test:watch\": \"cross-env BABEL_ENV=test karma start --browsers ChromeHeadless  --log-level warn\",\r\n    \"test:all\": \"cross-env BABEL_ENV=test karma start --single-run --log-level error\",\r\n    \"bench\": \"cross-env NODE_OPTIONS='--max-old-space-size=8192' karma start .config/karma.benchmark.conf.js --browsers ChromeHeadless\",\r\n    \"bench:all\": \"cross-env NODE_OPTIONS='--max-old-space-size=8192' karma start .config/karma.benchmark.conf.js\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.4.5\",\r\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.4.4\",\r\n    \"@babel/preset-env\": \"^7.4.5\",\r\n    \"arraybuffer-loader\": \"^1.0.7\",\r\n    \"babel-eslint\": \"^10.0.2\",\r\n    \"babel-loader\": \"^8.0.6\",\r\n    \"babel-plugin-istanbul\": \"^6.0.0\",\r\n    \"benchmark\": \"^2.1.4\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"coveralls\": \"^3.0.4\",\r\n    \"cross-env\": \"^6.0.0\",\r\n    \"cz-conventional-changelog\": \"3.0.2\",\r\n    \"eslint\": \"^6.0.0\",\r\n    \"eslint-loader\": \"^3.0.0\",\r\n    \"file-loader\": \"^5.0.0\",\r\n    \"json-loader\": \"^0.5.7\",\r\n    \"karma\": \"^4.1.0\",\r\n    \"karma-babel-preprocessor\": \"^8.0.0\",\r\n    \"karma-benchmark\": \"^1.0.4\",\r\n    \"karma-benchmark-json-reporter\": \"^1.0.1\",\r\n    \"karma-benchmarkjs-reporter\": \"^1.0.0\",\r\n    \"karma-chai\": \"^0.1.0\",\r\n    \"karma-chrome-launcher\": \"^3.1.0\",\r\n    \"karma-coverage\": \"^2.0.1\",\r\n    \"karma-coverage-istanbul-reporter\": \"^2.0.4\",\r\n    \"karma-edge-launcher\": \"^0.4.2\",\r\n    \"karma-firefox-launcher\": \"^1.1.0\",\r\n    \"karma-ie-launcher\": \"^1.0.0\",\r\n    \"karma-mocha\": \"^1.3.0\",\r\n    \"karma-mocha-reporter\": \"^2.2.5\",\r\n    \"karma-sinon\": \"^1.0.5\",\r\n    \"karma-sourcemap-loader\": \"^0.3.7\",\r\n    \"karma-webpack\": \"^4.0.2\",\r\n    \"mocha\": \"^6.1.4\",\r\n    \"mocha-lcov-reporter\": \"^1.3.0\",\r\n    \"pouchdb\": \"^7.1.1\",\r\n    \"semantic-release\": \"^15.13.16\",\r\n    \"sinon\": \"^8.0.0\",\r\n    \"webpack\": \"^4.35.0\",\r\n    \"webpack-bundle-analyzer\": \"^3.3.2\",\r\n    \"webpack-cli\": \"^3.3.4\",\r\n    \"webpack-merge\": \"^4.2.1\",\r\n    \"worker-loader\": \"^2.0.0\"\r\n  },\r\n  \"config\": {\r\n    \"commitizen\": {\r\n      \"path\": \"./node_modules/cz-conventional-changelog\"\r\n    }\r\n  },\r\n  \"dependencies\": {\r\n    \"webworker-promise\": \"^0.4.2\"\r\n  }\r\n}\r\n",
    "longname": "F:\\Projets\\blob-compare\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 71,
    "kind": "testFile",
    "name": "tests/blob-compare.spec.js",
    "content": "import blobCompare from '@';\r\nimport blobs from '../fixtures';\r\n\r\ndescribe('Blob-compare', function() {\r\n  /**\r\n   * @test {blobCompare.sizeEqual}\r\n  */\r\n  describe('sizeEqual', function() {\r\n    it('should return true if size are equal', function() {\r\n      blobCompare.sizeEqual(blobs.get('bmp1.bmp'), blobs.get('bmp2.bmp')).should.be.true;\r\n    })\r\n\r\n    it('should return false if size are not equal', function() {\r\n      blobCompare.sizeEqual(blobs.get('png1.png'), blobs.get('png2.png')).should.be.false;\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.typeEqual}\r\n   */\r\n  describe('typeEqual', function() {\r\n    it('should return true if type are equal', function() {\r\n      blobCompare.typeEqual(blobs.get('bmp1.bmp', 'image/bmp'), blobs.get('bmp2.bmp', 'image/bmp')).should.be.true;\r\n    })\r\n\r\n    it('should return false if type are not equal', function() {\r\n      blobCompare.typeEqual(blobs.get('png1.png', 'image/png'), blobs.get('bmp2.bmp', 'image/png')).should.be.false;\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.magicNumbersEqual}\r\n  */\r\n  describe('magicNumbersEqual', function() {\r\n    it('should return true if blobs are the same', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let cmp = await blobCompare.magicNumbersEqual(b, b);\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return true if magic numbers are equal (worker)', async function() {\r\n      let cmp = await blobCompare.magicNumbersEqual(blobs.get('png1.png'), blobs.get('png2.png'))\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return true if magic numbers are equal (main thread)', async function() {\r\n      let cmp = await blobCompare.magicNumbersEqual(blobs.get('png1.png'), blobs.get('png2.png'), false)\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return false if magic numbers are not equal', async function() {\r\n      let cmp = await blobCompare.magicNumbersEqual(blobs.get('jpeg1.jpg'), blobs.get('png2.png'))\r\n\r\n      cmp.should.be.false;\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.toBinaryString}\r\n   * @test {blobCompare.toArrayBuffer}\r\n  */\r\n  describe('toBinaryString && toArrayBuffer', function() {\r\n    it('should return a binary string (worker)', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let s = await blobCompare.toBinaryString(b);\r\n\r\n      expect(typeof s).to.equal('string');\r\n    })\r\n\r\n    it('should return a binary string (main thread)', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let s = await blobCompare.toBinaryString(b, false, false);\r\n\r\n      expect(typeof s).to.equal('string');\r\n    })\r\n\r\n    it('should return an arrayBuffer (worker)', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let s = await blobCompare.toArrayBuffer(b);\r\n\r\n      s.should.be.instanceof(ArrayBuffer);\r\n    })\r\n\r\n    it('should return an arrayBuffer (main thread)', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let s = await blobCompare.toArrayBuffer(b, false, false);\r\n\r\n      s.should.be.instanceof(ArrayBuffer);\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.compareBuffers}\r\n  */\r\n  describe('compareBuffers', function() {\r\n    it('should return true if buffers are the same (worker)', async function() {\r\n      const b = new ArrayBuffer(8);\r\n      const res = await blobCompare.compareBuffers(b, b)\r\n\r\n      res.should.be.true;\r\n    })\r\n\r\n    it('should return true if buffers are the same (main thread)', async function() {\r\n      const b = new ArrayBuffer(8);\r\n      const res = await blobCompare.compareBuffers(b, b, false)\r\n\r\n      res.should.be.true;\r\n    })\r\n\r\n    it('should return false if buffers are not the same length', async function() {\r\n      const b1 = new ArrayBuffer(8);\r\n      const b2 = new ArrayBuffer(10);\r\n\r\n      blobCompare.compareBuffers(b1, b2, false).should.be.false;\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.bytesEqualWithBinaryString}\r\n  */\r\n  describe('bytesEqualWithBinaryString', function() {\r\n    it('should return true if blobs are the same', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let cmp = await blobCompare.bytesEqualWithBinaryString(b, b);\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return true if bytes are equal (worker)', async function() {\r\n      let cmp = await blobCompare.bytesEqualWithBinaryString(blobs.get('jpeg1.jpg'), blobs.get('jpeg1.jpg'));\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return true if bytes are equal (main thread)', async function() {\r\n      let cmp = await blobCompare.bytesEqualWithBinaryString(blobs.get('jpeg1.jpg'), blobs.get('jpeg1.jpg'), false, false);\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return false if bytes are not equal', async function() {\r\n      let cmp = await blobCompare.bytesEqualWithBinaryString(blobs.get('jpeg1.jpg'), blobs.get('jpeg2.jpg'));\r\n\r\n      cmp.should.be.false;\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.bytesEqualWithArrayBuffer}\r\n  */\r\n  describe('bytesEqualWithArrayBuffer', function() {\r\n    it('should return true if blobs are the same', async function() {\r\n      let b = blobs.get('jpeg1.jpg');\r\n      let cmp = await blobCompare.bytesEqualWithArrayBuffer(b, b);\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return true if bytes are equal (worker)', async function() {\r\n      let cmp = await blobCompare.bytesEqualWithArrayBuffer(blobs.get('jpeg1.jpg'), blobs.get('jpeg1.jpg'));\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return true if bytes are equal (main thread)', async function() {\r\n      let cmp = await blobCompare.bytesEqualWithArrayBuffer(blobs.get('jpeg1.jpg'), blobs.get('jpeg1.jpg'), false, false);\r\n\r\n      cmp.should.be.true;\r\n    })\r\n\r\n    it('should return false if bytes are not equal', async function() {\r\n      let cmp = await blobCompare.bytesEqualWithArrayBuffer(blobs.get('jpeg1.jpg'), blobs.get('jpeg2.jpg'));\r\n\r\n      cmp.should.be.false;\r\n    })\r\n  });\r\n\r\n  /**\r\n   * @test {blobCompare.isEqual}\r\n  */\r\n  describe('isEqual', function() {\r\n    // build a blobs to run test automatically, [b1, b2, expected, size]\r\n    const suite = [\r\n      ['empty', 'empty', true],\r\n      ['jpeg1.jpg', 'jpeg1.jpg', true],\r\n      ['jpeg1.jpg', 'jpeg2.jpg', false],\r\n      ['jpeg1.jpg', 'jpeg2.jpg', true, {methods: ['types']}], // Types are the same\r\n      ['png1.png', 'png2.png', true, {methods: ['types', 'size'], partial: true}], // Same types so partial succeeds\r\n      ['png1.png', 'png2.png', false, {methods: ['types', 'size']}], // Sizes are different\r\n      ['png1.png', 'png1.png', true],\r\n      ['png1.png', 'png2.png', false],\r\n      ['png1.png', 'png2.png', true, {methods: ['magic']}], // Magic numbers are the same\r\n      ['png1.png', 'png2.png', true, {methods: ['magic', 'size'], partial: true}], // Magic numbers are the same\r\n      ['bmp1.bmp', 'bmp1.bmp', true],\r\n      ['bmp1.bmp', 'bmp2.bmp', false],\r\n      ['bmp1.bmp', 'bmp2.bmp', true, {partial: true}], // Same sizes so partial succeeds\r\n      ['bmp1.bmp', 'bmp2.bmp', true, {chunks : [512]}], // Sample size is too small to see difference between the two files\r\n      ['bmp1.bmp', 'bmp2.bmp', false, {chunks : [512, 2048]}], // Second sample size is enough to see difference between the two files\r\n      ['bmp1.bmp', 'bmp2.bmp', false, {methods: ['bytes']}], // Force using only blob size\r\n      ['bmp1.bmp', 'bmp2.bmp', false, {methods: ['bytes'], byte: 'string'}], // Force using only blob size with binary string\r\n      ['bmp1.bmp', 'bmp2.bmp', false, {methods: ['bytes'], worker: false}], // Force using only blob size with buffer in main thread\r\n      ['bmp1.bmp', 'bmp2.bmp', true, {methods: ['size']}], // Sizes are the same though files are different\r\n      ['jpeg1.jpg', 'png1.png', false],\r\n    ]\r\n\r\n    for (let t of suite) {\r\n      const [n1, n2, expected, options] = t;\r\n\r\n      it(`should return ${expected} with ${n1} vs ${n2} and ${options ? JSON.stringify(options) : 'default options'}`, async function() {\r\n          const res = await blobCompare.isEqual(blobs.get(n1), blobs.get(n2), options);\r\n\r\n          expect(res).to.equal(expected);\r\n      })\r\n    }\r\n\r\n    it('should throw if one method is not recognized', async function() {\r\n      try {\r\n        await blobCompare.isEqual(blobs.get('jpeg1.jpg'), blobs.get('jpeg2.jpg'), {methods: ['silly']});\r\n        expect.fail();\r\n      } catch (err) {\r\n        err.message.should.equal('Blob-compare : Unknown comparison method');\r\n      }\r\n    })\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "F:/Projets/blob-compare/tests/blob-compare.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/blob-compare.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0",
    "access": null,
    "description": "Blob-compare",
    "lineNumber": 4
  },
  {
    "__docId__": 73,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe1",
    "access": null,
    "description": "sizeEqual",
    "lineNumber": 8,
    "testTargets": [
      "blobCompare.sizeEqual"
    ]
  },
  {
    "__docId__": 74,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "tests/blob-compare.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "should return true if size are equal",
    "lineNumber": 9
  },
  {
    "__docId__": 75,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "tests/blob-compare.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "should return false if size are not equal",
    "lineNumber": 13
  },
  {
    "__docId__": 76,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe4",
    "access": null,
    "description": "typeEqual",
    "lineNumber": 21,
    "testTargets": [
      "blobCompare.typeEqual"
    ]
  },
  {
    "__docId__": 77,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "tests/blob-compare.spec.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe4.it5",
    "access": null,
    "description": "should return true if type are equal",
    "lineNumber": 22
  },
  {
    "__docId__": 78,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "tests/blob-compare.spec.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe4.it6",
    "access": null,
    "description": "should return false if type are not equal",
    "lineNumber": 26
  },
  {
    "__docId__": 79,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe7",
    "access": null,
    "description": "magicNumbersEqual",
    "lineNumber": 34,
    "testTargets": [
      "blobCompare.magicNumbersEqual"
    ]
  },
  {
    "__docId__": 80,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "tests/blob-compare.spec.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe7.it8",
    "access": null,
    "description": "should return true if blobs are the same",
    "lineNumber": 35
  },
  {
    "__docId__": 81,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "tests/blob-compare.spec.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe7.it9",
    "access": null,
    "description": "should return true if magic numbers are equal (worker)",
    "lineNumber": 42
  },
  {
    "__docId__": 82,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "tests/blob-compare.spec.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe7.it10",
    "access": null,
    "description": "should return true if magic numbers are equal (main thread)",
    "lineNumber": 48
  },
  {
    "__docId__": 83,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "tests/blob-compare.spec.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe7.it11",
    "access": null,
    "description": "should return false if magic numbers are not equal",
    "lineNumber": 54
  },
  {
    "__docId__": 84,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe12",
    "access": null,
    "description": "toBinaryString && toArrayBuffer",
    "lineNumber": 65,
    "testTargets": [
      "blobCompare.toBinaryString",
      "blobCompare.toArrayBuffer"
    ]
  },
  {
    "__docId__": 85,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "tests/blob-compare.spec.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe12.it13",
    "access": null,
    "description": "should return a binary string (worker)",
    "lineNumber": 66
  },
  {
    "__docId__": 86,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "tests/blob-compare.spec.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe12.it14",
    "access": null,
    "description": "should return a binary string (main thread)",
    "lineNumber": 73
  },
  {
    "__docId__": 87,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "tests/blob-compare.spec.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe12.it15",
    "access": null,
    "description": "should return an arrayBuffer (worker)",
    "lineNumber": 80
  },
  {
    "__docId__": 88,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "tests/blob-compare.spec.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe12.it16",
    "access": null,
    "description": "should return an arrayBuffer (main thread)",
    "lineNumber": 87
  },
  {
    "__docId__": 89,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe17",
    "access": null,
    "description": "compareBuffers",
    "lineNumber": 98,
    "testTargets": [
      "blobCompare.compareBuffers"
    ]
  },
  {
    "__docId__": 90,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "tests/blob-compare.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe17.it18",
    "access": null,
    "description": "should return true if buffers are the same (worker)",
    "lineNumber": 99
  },
  {
    "__docId__": 91,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "tests/blob-compare.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe17.it19",
    "access": null,
    "description": "should return true if buffers are the same (main thread)",
    "lineNumber": 106
  },
  {
    "__docId__": 92,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "tests/blob-compare.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe17.it20",
    "access": null,
    "description": "should return false if buffers are not the same length",
    "lineNumber": 113
  },
  {
    "__docId__": 93,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe21",
    "access": null,
    "description": "bytesEqualWithBinaryString",
    "lineNumber": 124,
    "testTargets": [
      "blobCompare.bytesEqualWithBinaryString"
    ]
  },
  {
    "__docId__": 94,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "tests/blob-compare.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe21.it22",
    "access": null,
    "description": "should return true if blobs are the same",
    "lineNumber": 125
  },
  {
    "__docId__": 95,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "tests/blob-compare.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe21.it23",
    "access": null,
    "description": "should return true if bytes are equal (worker)",
    "lineNumber": 132
  },
  {
    "__docId__": 96,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "tests/blob-compare.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe21.it24",
    "access": null,
    "description": "should return true if bytes are equal (main thread)",
    "lineNumber": 138
  },
  {
    "__docId__": 97,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "tests/blob-compare.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe21.it25",
    "access": null,
    "description": "should return false if bytes are not equal",
    "lineNumber": 144
  },
  {
    "__docId__": 98,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe26",
    "access": null,
    "description": "bytesEqualWithArrayBuffer",
    "lineNumber": 154,
    "testTargets": [
      "blobCompare.bytesEqualWithArrayBuffer"
    ]
  },
  {
    "__docId__": 99,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "tests/blob-compare.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe26.it27",
    "access": null,
    "description": "should return true if blobs are the same",
    "lineNumber": 155
  },
  {
    "__docId__": 100,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "tests/blob-compare.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe26.it28",
    "access": null,
    "description": "should return true if bytes are equal (worker)",
    "lineNumber": 162
  },
  {
    "__docId__": 101,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "tests/blob-compare.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe26.it29",
    "access": null,
    "description": "should return true if bytes are equal (main thread)",
    "lineNumber": 168
  },
  {
    "__docId__": 102,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "tests/blob-compare.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe26.it30",
    "access": null,
    "description": "should return false if bytes are not equal",
    "lineNumber": 174
  },
  {
    "__docId__": 103,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "tests/blob-compare.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe31",
    "access": null,
    "description": "isEqual",
    "lineNumber": 184,
    "testTargets": [
      "blobCompare.isEqual"
    ]
  },
  {
    "__docId__": 104,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "tests/blob-compare.spec.js~describe0.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe31.it32",
    "access": null,
    "lineNumber": 212
  },
  {
    "__docId__": 105,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "tests/blob-compare.spec.js~describe0.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "tests/blob-compare.spec.js~describe0.describe31.it33",
    "access": null,
    "description": "should throw if one method is not recognized",
    "lineNumber": 219
  }
]